pipeline {
  // The following pipeline provides an opinionated template you can customize for your own needs.
  // 
  // Instructions for configuring the Octopus plugin can be found at
  // https://octopus.com/docs/packaging-applications/build-servers/jenkins#configure-the-octopus-deploy-plugin
  // 
  // Get a trial Octopus instance from https://octopus.com/start
  // 
  // This pipeline requires the following plugins:
  // * Pipeline Utility Steps Plugin: https://wiki.jenkins.io/display/JENKINS/Pipeline+Utility+Steps+Plugin
  // * Git: https://plugins.jenkins.io/git/
  // * Workflow Aggregator: https://plugins.jenkins.io/workflow-aggregator/
  // * Octopus Deploy: https://plugins.jenkins.io/octopusdeploy/.
  // * JUnit: https://plugins.jenkins.io/junit/
  parameters {
    // Parameters are only available after the first run. See https://issues.jenkins.io/browse/JENKINS-41929 for more details.
    string(defaultValue: 'Spaces-1', description: '', name: 'SpaceId', trim: true)
    string(defaultValue: 'RandomQuotes-Python', description: '', name: 'ProjectName', trim: true)
    string(defaultValue: 'Dev', description: '', name: 'EnvironmentName', trim: true)
    string(defaultValue: 'Octopus', description: '', name: 'ServerId', trim: true)
  }
  agent 'any'
  stages {
    stage('Environment') {
      steps {
          echo "PATH = ${env.PATH}"
      }
    }
    stage('Checkout') {
      steps {
        // If this pipeline is saved as a Jenkinsfile in a git repo, the checkout stage can be deleted as
        // Jenkins will check out the code for you.
        script {
            /*
              This is from the Jenkins "Global Variable Reference" documentation:
              SCM-specific variables such as GIT_COMMIT are not automatically defined as environment variables; rather you can use the return value of the checkout step.
            */
            def checkoutVars = checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/OctopusSamples/RandomQuotes-Python.git']]])
            env.GIT_URL = checkoutVars.GIT_URL
            env.GIT_COMMIT = checkoutVars.GIT_COMMIT
            env.GIT_BRANCH = checkoutVars.GIT_BRANCH
        }
      }
    }
    stage('Dependencies') {
      steps {
        sh(script: 'pip install -r requirements.txt')
        // Save the dependencies that went into this build into an artifact. This allows you to review any builds for vulnerabilities later on.
        sh(script: 'pip install pipdeptree')
        sh(script: 'pipdeptree > dependencies.txt')
        archiveArtifacts(artifacts: 'dependencies.txt', fingerprint: true)
        // List any dependency updates.
        // "pip list --outdated" can return the error "AttributeError: module 'html5lib.treebuilders.etree' has no attribute 'getETreeModule'"
        // in some circumstances. We'll allow this to fail by ensuring the command below always has an exit code of 0, but you can remove the
        // "|| true" to see any failures.
        sh(script: 'pip list --outdated --format=freeze > dependencieupdates.txt || true')
        archiveArtifacts(artifacts: 'dependencieupdates.txt', fingerprint: true)
      }
    }
    stage('Test') {
      steps {
        sh(script: 'pip install pytest', returnStdout: true)
        // Allow pytest to fail by always generating an exit code of zero.
        // https://docs.pytest.org/en/latest/reference/exit-codes.html
        // The junit plugin can pass or fail depending on the presence or absence of tests.
        sh(script: 'pytest --junitxml=results.xml || true', returnStdout: true)
        junit(testResults: 'results.xml', allowEmptyResults : true)
      }
    }
    stage('Package') {
      steps {
        // Gitversion is available from https://github.com/GitTools/GitVersion/releases.
        // We attempt to run gitversion if the executable is available.
        sh(script: 'which gitversion && gitversion /output buildserver || true')
        // Capture the git version as an environment variable, or use a default version if gitversion wasn't available.
        // https://gitversion.net/docs/reference/build-servers/jenkins
        script {
            if (fileExists('gitversion.properties')) {
              def props = readProperties file: 'gitversion.properties'
              env.VERSION_SEMVER = props.GitVersion_SemVer
              env.VERSION_BRANCHNAME = props.GitVersion_BranchName
              env.VERSION_ASSEMBLYSEMVER = props.GitVersion_AssemblySemVer
              env.VERSION_MAJORMINORPATCH = props.GitVersion_MajorMinorPatch
              env.VERSION_SHA = props.GitVersion_Sha
            } else {
              env.VERSION_SEMVER = "1.0.0." + env.BUILD_NUMBER
            }
        }
        script {
            octopusPack(
            	additionalArgs: '',
            	sourcePath: '.',
            	outputPath : ".",
            	includePaths: "**/*.py\n**/*.pyc\n**/*.html\n**/*.htm\n**/*.css\n**/*.js\n**/*.min\n**/*.map\n**/*.sql\n**/*.png\n**/*.jpg\n**/*.jpeg\n**/*.gif\n**/*.json\n**/*.env\n**/*.txt\n**/Procfile",
            	overwriteExisting: true, 
            	packageFormat: 'zip', 
            	packageId: 'RandomQuotes-Python', 
            	packageVersion: env.VERSION_SEMVER, 
            	toolId: 'Default', 
            	verboseLogging: false)
            env.ARTIFACTS = "RandomQuotes-Python.${env.VERSION_SEMVER}.zip"
        }
      }
    }
    stage('Deployment') {
      steps {
        // This stage assumes you perform the deployment with Octopus Deploy.
        // The steps shown below can be replaced with your own custom steps to deploy to other platforms if needed.
        octopusPushPackage(additionalArgs: '',
          packagePaths: env.ARTIFACTS.split(":").join("\n"),
          overwriteMode: 'OverwriteExisting',
          serverId: params.ServerId,
          spaceId: params.SpaceId,
          toolId: 'Default')
        octopusPushBuildInformation(additionalArgs: '',
          commentParser: 'GitHub',
          overwriteMode: 'OverwriteExisting',
          packageId: env.ARTIFACTS.split(":")[0].substring(env.ARTIFACTS.split(":")[0].lastIndexOf("/") + 1, env.ARTIFACTS.split(":")[0].length()).replaceAll("\\." + env.VERSION_SEMVER + "\\..+", ""),
          packageVersion: env.VERSION_SEMVER,
          serverId: params.ServerId,
          spaceId: params.SpaceId,
          toolId: 'Default',
          verboseLogging: false,
          gitUrl: env.GIT_URL,
          gitCommit: env.GIT_COMMIT,
          gitBranch: env.GIT_BRANCH)
        octopusCreateRelease(additionalArgs: '',
          cancelOnTimeout: false,
          channel: '',
          defaultPackageVersion: '',
          deployThisRelease: false,
          deploymentTimeout: '',
          environment: params.EnvironmentName,
          jenkinsUrlLinkback: false,
          project: params.ProjectName,
          releaseNotes: false,
          releaseNotesFile: '',
          releaseVersion: env.VERSION_SEMVER,
          serverId: params.ServerId,
          spaceId: params.SpaceId,
          tenant: '',
          tenantTag: '',
          toolId: 'Default',
          verboseLogging: false,
          waitForDeployment: false)
        octopusDeployRelease(cancelOnTimeout: false,
          deploymentTimeout: '',
          environment: params.EnvironmentName,
          project: params.ProjectName,
          releaseVersion: env.VERSION_SEMVER,
          serverId: params.ServerId,
          spaceId: params.SpaceId,
          tenant: '',
          tenantTag: '',
          toolId: 'Default',
          variables: '',
          verboseLogging: false,
          waitForDeployment: true)
      }
    }
  }
}# The following workflow provides an opinionated template you can customize for your own needs.
#
# If you are not an Octopus user, the "Push to Octopus", "Generate Octopus Deploy build information",
# and "Create Octopus Release" steps can be safely deleted.
#
# To configure Octopus, set the OCTOPUS_API_TOKEN secret to the Octopus API key, and
# set the OCTOPUS_SERVER_URL secret to the Octopus URL.
#
# Double check the "project" and "deploy_to" properties in the "Create Octopus Release" step
# match your Octopus projects and environments.
#
# Get a trial Octopus instance from https://octopus.com/start

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: '0'
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x
    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        additionalArguments: /overrideconfig mode=Mainline
    - name: Install Octopus Deploy CLI
      uses: OctopusDeploy/install-octocli@v1.1.1
      with:
        version: latest
    - name: Install Dependencies
      run: pip install -r requirements.txt
      shell: bash
    - name: List Dependencies
      run: pip install pipdeptree; pipdeptree > dependencies.txt
      shell: bash
    - name: Collect Dependencies
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies
        path: dependencies.txt
    - name: List Dependency Updates
      run: pip list --outdated --format=freeze > dependencyUpdates.txt || true
      shell: bash
    - name: Collect Dependency Updates
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies Updates
        path: dependencyUpdates.txt
    - name: Test
      run: pip install pytest; pytest --junitxml=results.xml
      shell: bash
    - if: always()
      name: Report
      uses: dorny/test-reporter@v1
      with:
        name: Python Tests
        path: results.xml
        reporter: java-junit
        fail-on-error: 'false'
    - name: Package
      run: |-
        SOURCEPATH=.
        OUTPUTPATH=.
        octo pack \
         --basePath ${SOURCEPATH} \
         --outFolder ${OUTPUTPATH} \
         --id RandomQuotes-Python \
         --version ${{ steps.determine_version.outputs.semVer }} \
         --format zip \
         --overwrite \
         --include '**/*.py' \
         --include '**/*.pyc' \
         --include '**/*.html' \
         --include '**/*.htm' \
         --include '**/*.css' \
         --include '**/*.js' \
         --include '**/*.min' \
         --include '**/*.map' \
         --include '**/*.sql' \
         --include '**/*.png' \
         --include '**/*.jpg' \
         --include '**/*.jpeg' \
         --include '**/*.gif' \
         --include '**/*.json' \
         --include '**/*.env' \
         --include '**/*.txt' \
         --include '**/*.Procfile'
      shell: bash
    - name: Tag Release
      uses: mathieudutour/github-tag-action@v6.0
      with:
        custom_tag: ${{ steps.determine_version.outputs.semVer }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_release
      name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
        release_name: Release ${{ steps.determine_version.outputs.semVer }} Run ${{ github.run_number }} Attempt ${{ github.run_attempt }}
        draft: 'false'
        prerelease: 'false'
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: RandomQuotes-Python.${{ steps.determine_version.outputs.semVer }}.zip
        asset_name: RandomQuotes-Python.${{ steps.determine_version.outputs.semVer }}.zip
        asset_content_type: application/octet-stream
    - name: Push to Octopus
      uses: OctopusDeploy/push-package-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        packages: RandomQuotes-Python.${{ steps.determine_version.outputs.semVer }}.zip
        server: ${{ secrets.OCTOPUS_SERVER_URL }}
        overwrite_mode: OverwriteExisting
    - name: Generate Octopus Deploy build information
      uses: xo-energy/action-octopus-build-information@v1.1.2
      with:
        octopus_api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        octopus_project: RandomQuotes-Python
        octopus_server: ${{ secrets.OCTOPUS_SERVER_URL }}
        push_version: ${{ steps.determine_version.outputs.semVer }}
        push_package_ids: RandomQuotes-Python
        push_overwrite_mode: OverwriteExisting
        output_path: octopus
    - name: Create Octopus Release
      uses: OctopusDeploy/create-release-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        project: RandomQuotes-Python
        server: ${{ secrets.OCTOPUS_SERVER_URL }}
        deploy_to: Development
        packages: RandomQuotes-Python:${{ steps.determine_version.outputs.semVer }}
name: Python Build
'on':
  workflow_dispatch: {}
  push: {}
